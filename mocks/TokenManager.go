// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "pinstack-auth-service/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// TokenManager is an autogenerated mock type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

type TokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenManager) EXPECT() *TokenManager_Expecter {
	return &TokenManager_Expecter{mock: &_m.Mock}
}

// NewJWT provides a mock function with given fields: userID
func (_m *TokenManager) NewJWT(userID int64) (*model.TokenPair, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for NewJWT")
	}

	var r0 *model.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.TokenPair, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.TokenPair); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenManager_NewJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewJWT'
type TokenManager_NewJWT_Call struct {
	*mock.Call
}

// NewJWT is a helper method to define mock.On call
//   - userID int64
func (_e *TokenManager_Expecter) NewJWT(userID interface{}) *TokenManager_NewJWT_Call {
	return &TokenManager_NewJWT_Call{Call: _e.mock.On("NewJWT", userID)}
}

func (_c *TokenManager_NewJWT_Call) Run(run func(userID int64)) *TokenManager_NewJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *TokenManager_NewJWT_Call) Return(_a0 *model.TokenPair, _a1 error) *TokenManager_NewJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenManager_NewJWT_Call) RunAndReturn(run func(int64) (*model.TokenPair, error)) *TokenManager_NewJWT_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRefreshToken provides a mock function with given fields: tokenString
func (_m *TokenManager) ParseRefreshToken(tokenString string) (*model.TokenClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseRefreshToken")
	}

	var r0 *model.TokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.TokenClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *model.TokenClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenManager_ParseRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRefreshToken'
type TokenManager_ParseRefreshToken_Call struct {
	*mock.Call
}

// ParseRefreshToken is a helper method to define mock.On call
//   - tokenString string
func (_e *TokenManager_Expecter) ParseRefreshToken(tokenString interface{}) *TokenManager_ParseRefreshToken_Call {
	return &TokenManager_ParseRefreshToken_Call{Call: _e.mock.On("ParseRefreshToken", tokenString)}
}

func (_c *TokenManager_ParseRefreshToken_Call) Run(run func(tokenString string)) *TokenManager_ParseRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenManager_ParseRefreshToken_Call) Return(_a0 *model.TokenClaims, _a1 error) *TokenManager_ParseRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenManager_ParseRefreshToken_Call) RunAndReturn(run func(string) (*model.TokenClaims, error)) *TokenManager_ParseRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-auth-service/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// UserClient is an autogenerated mock type for the UserClient type
type UserClient struct {
	mock.Mock
}

type UserClient_Expecter struct {
	mock *mock.Mock
}

func (_m *UserClient) EXPECT() *UserClient_Expecter {
	return &UserClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserClient) CreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *UserClient_Expecter) CreateUser(ctx interface{}, user interface{}) *UserClient_CreateUser_Call {
	return &UserClient_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserClient_CreateUser_Call) Run(run func(ctx context.Context, user *model.User)) *UserClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *UserClient_CreateUser_Call) Return(_a0 *model.User, _a1 error) *UserClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_CreateUser_Call) RunAndReturn(run func(context.Context, *model.User) (*model.User, error)) *UserClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserClient) GetUser(ctx context.Context, id int64) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserClient_Expecter) GetUser(ctx interface{}, id interface{}) *UserClient_GetUser_Call {
	return &UserClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserClient_GetUser_Call) Run(run func(ctx context.Context, id int64)) *UserClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserClient_GetUser_Call) Return(_a0 *model.User, _a1 error) *UserClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_GetUser_Call) RunAndReturn(run func(context.Context, int64) (*model.User, error)) *UserClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserClient) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserClient_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserClient_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserClient_GetUserByEmail_Call {
	return &UserClient_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserClient_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserClient_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserClient_GetUserByEmail_Call) Return(_a0 *model.User, _a1 error) *UserClient_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UserClient_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserClient) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserClient_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type UserClient_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserClient_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *UserClient_GetUserByUsername_Call {
	return &UserClient_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *UserClient_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *UserClient_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserClient_GetUserByUsername_Call) Return(_a0 *model.User, _a1 error) *UserClient_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserClient_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UserClient_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, oldPassword, newPassword
func (_m *UserClient) UpdatePassword(ctx context.Context, id int64, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, id, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, id, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserClient_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UserClient_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - oldPassword string
//   - newPassword string
func (_e *UserClient_Expecter) UpdatePassword(ctx interface{}, id interface{}, oldPassword interface{}, newPassword interface{}) *UserClient_UpdatePassword_Call {
	return &UserClient_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, oldPassword, newPassword)}
}

func (_c *UserClient_UpdatePassword_Call) Run(run func(ctx context.Context, id int64, oldPassword string, newPassword string)) *UserClient_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserClient_UpdatePassword_Call) Return(_a0 error) *UserClient_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserClient_UpdatePassword_Call) RunAndReturn(run func(context.Context, int64, string, string) error) *UserClient_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserClient creates a new instance of UserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserClient {
	mock := &UserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

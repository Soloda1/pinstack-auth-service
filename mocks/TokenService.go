// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	auth "pinstack-auth-service/internal/auth"

	context "context"

	mock "github.com/stretchr/testify/mock"

	model "pinstack-auth-service/internal/model"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

type TokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenService) EXPECT() *TokenService_Expecter {
	return &TokenService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, login, password
func (_m *TokenService) Login(ctx context.Context, login string, password string) (*auth.TokenPair, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*auth.TokenPair, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *auth.TokenPair); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type TokenService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password string
func (_e *TokenService_Expecter) Login(ctx interface{}, login interface{}, password interface{}) *TokenService_Login_Call {
	return &TokenService_Login_Call{Call: _e.mock.On("Login", ctx, login, password)}
}

func (_c *TokenService_Login_Call) Run(run func(ctx context.Context, login string, password string)) *TokenService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TokenService_Login_Call) Return(_a0 *auth.TokenPair, _a1 error) *TokenService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_Login_Call) RunAndReturn(run func(context.Context, string, string) (*auth.TokenPair, error)) *TokenService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *TokenService) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type TokenService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *TokenService_Expecter) Logout(ctx interface{}, refreshToken interface{}) *TokenService_Logout_Call {
	return &TokenService_Logout_Call{Call: _e.mock.On("Logout", ctx, refreshToken)}
}

func (_c *TokenService_Logout_Call) Run(run func(ctx context.Context, refreshToken string)) *TokenService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenService_Logout_Call) Return(_a0 error) *TokenService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenService_Logout_Call) RunAndReturn(run func(context.Context, string) error) *TokenService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *TokenService) Refresh(ctx context.Context, refreshToken string) (*auth.TokenPair, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.TokenPair, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.TokenPair); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type TokenService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *TokenService_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *TokenService_Refresh_Call {
	return &TokenService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *TokenService_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *TokenService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenService_Refresh_Call) Return(_a0 *auth.TokenPair, _a1 error) *TokenService_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_Refresh_Call) RunAndReturn(run func(context.Context, string) (*auth.TokenPair, error)) *TokenService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, user
func (_m *TokenService) Register(ctx context.Context, user *model.User) (*auth.TokenPair, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*auth.TokenPair, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *auth.TokenPair); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type TokenService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *TokenService_Expecter) Register(ctx interface{}, user interface{}) *TokenService_Register_Call {
	return &TokenService_Register_Call{Call: _e.mock.On("Register", ctx, user)}
}

func (_c *TokenService_Register_Call) Run(run func(ctx context.Context, user *model.User)) *TokenService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *TokenService_Register_Call) Return(_a0 *auth.TokenPair, _a1 error) *TokenService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_Register_Call) RunAndReturn(run func(context.Context, *model.User) (*auth.TokenPair, error)) *TokenService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, oldPassword, newPassword
func (_m *TokenService) UpdatePassword(ctx context.Context, id int64, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, id, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, id, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type TokenService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - oldPassword string
//   - newPassword string
func (_e *TokenService_Expecter) UpdatePassword(ctx interface{}, id interface{}, oldPassword interface{}, newPassword interface{}) *TokenService_UpdatePassword_Call {
	return &TokenService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, oldPassword, newPassword)}
}

func (_c *TokenService_UpdatePassword_Call) Run(run func(ctx context.Context, id int64, oldPassword string, newPassword string)) *TokenService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TokenService_UpdatePassword_Call) Return(_a0 error) *TokenService_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenService_UpdatePassword_Call) RunAndReturn(run func(context.Context, int64, string, string) error) *TokenService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
